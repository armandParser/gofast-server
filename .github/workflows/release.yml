name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version info

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build binaries for all platforms
      run: |
        export VERSION=${{ steps.version.outputs.VERSION }}
        make build-all

    - name: Create release archives
      run: make release

    - name: Generate checksums
      run: |
        cd bin/releases
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: GoFast Server ${{ steps.version.outputs.VERSION }}
        body: |
          ## GoFast Server ${{ steps.version.outputs.VERSION }}
          
          ### üöÄ What's New
          - High-performance in-memory cache server
          - Redis-compatible commands and data structures
          - Support for strings, lists, sets, and hashes
          - Pipeline operations for maximum throughput
          - TTL support with automatic expiration
          - Pattern matching with KEYS and SCAN operations
          
          ### üì¶ Installation
          
          #### Quick Start (Linux/macOS)
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/gofast-server-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
          tar -xzf gofast-server-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
          
          # Run the server
          ./gofast-server-linux-amd64 --host=0.0.0.0 --port=6379
          ```
          
          #### Windows
          ```cmd
          # Download gofast-server-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
          # Extract and run:
          gofast-server-windows-amd64.exe --host=0.0.0.0 --port=6379
          ```
          
          ### üê≥ Docker
          ```bash
          docker run -p 6379:6379 ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          ```
          
          ### üìä Performance
          - **Throughput**: 100k+ operations/second
          - **Latency**: P99 < 1ms for simple operations
          - **Memory**: Efficient with object pooling and zero-copy operations
          
          ### üîß Configuration
          ```bash
          # Basic usage
          ./gofast-server --help
          
          # High-performance setup
          ./gofast-server --host=0.0.0.0 --port=6379 --max-memory=8GB --max-clients=50000
          
          # With persistence
          ./gofast-server --enable-persist --data-dir=/var/lib/gofast --save-interval=300s
          ```
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Linux AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/releases/gofast-server-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
        asset_name: gofast-server-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/releases/gofast-server-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz
        asset_name: gofast-server-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/releases/gofast-server-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
        asset_name: gofast-server-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
        asset_content_type: application/zip

    - name: Upload macOS AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/releases/gofast-server-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz
        asset_name: gofast-server-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/releases/gofast-server-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz
        asset_name: gofast-server-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/releases/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain